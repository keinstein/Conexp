package conexp.frontend.io.csv;import conexp.core.Context;import conexp.core.ContextEntity;import conexp.frontend.io.ContextCreator;import conexp.frontend.io.ContextReader;import util.DataFormatException;import util.StringUtil;import java.io.BufferedReader;import java.io.IOException;import java.io.Reader;import java.util.StringTokenizer;/** * CVSContextCreator creates a Context or loads a Document from a ContextCreator */public class CSVContextCreator implements ContextCreator, ContextReader {    /** the marker for crosses in the context*/    protected String crossToken = "1";    /** the separator for crosses in the context*/    protected String separator = ";";    protected boolean debug = false;    public static final char COMMENT_CHARACTER = '%';//	TODO possibility to add Object to Context from Reader by setting this to null    public CSVContextCreator() {    }    public CSVContextCreator(String separator) {        this();        this.separator = separator;    }    public Context parseContext(Reader reader) throws IOException, DataFormatException {        Context context = new Context(0, 0);        BufferedReader bufferedReader = new BufferedReader(reader);        //todo: here code can fail and throw null pointer exception. Write test and fix        String input = bufferedReader.readLine();        input.trim();        //todo: here code can fail. Write test and fix. Sergey        readAttributes(input, context);        input = bufferedReader.readLine();        int lastObjectIndex = -1;        while (input != null) {            input.trim();            if (addObjectInfos(input, lastObjectIndex, context)) {                lastObjectIndex++;            }            input = bufferedReader.readLine();        }        return context;    }    public Context createContext(Object obj) {        try {            return parseContext((Reader) obj);        } catch (IOException e) {            e.printStackTrace();  //To change body of catch statement use Options | File Templates.        } catch (DataFormatException e) {            e.printStackTrace();  //To change body of catch statement use Options | File Templates.        }        return null;    }    protected void readAttributes(String input, Context context) {        if (shouldSkipLine(input)) {            return;        }        StringTokenizer tokenizer = new StringTokenizer(input, separator);        // right now do nothng with the first one        while (tokenizer.hasMoreTokens()) {            String tok = tokenizer.nextToken();            context.addAttribute(ContextEntity.createContextAttribute(tok));        }    }    private boolean shouldSkipLine(String input) {        if (!"".equals(input) && input.charAt(0) == COMMENT_CHARACTER) {            return true;        }        return "".equals(StringUtil.safeTrim(input));    }    protected boolean addObjectInfos(String input, int lastObjectIndex, Context context) {        if (shouldSkipLine(input)) {            return false;        }        StringTokenizer tokenizer = new StringTokenizer(input, separator);        String tok = tokenizer.nextToken();        //TODO: check, what, if token is empty? Is it possible ?        context.addObject(ContextEntity.createContextObject(tok));        int currObjectIndex = lastObjectIndex + 1 ;        int attributeIndex = 0;        while (tokenizer.hasMoreTokens()) {            tok = tokenizer.nextToken();            tok.trim();            if (tok.equals(crossToken)) {                context.setRelationAt(currObjectIndex, attributeIndex, true);            }            attributeIndex++;        }        return true;    }    /**     * @return the string Value which sets the cross     */    public String getCrossToken() {        return crossToken;    }    /**     * sets the value of the field separator     * @param newValue     */    public void setSeparator(String newValue) {        separator = newValue;    }    /**     * @return the value of the separator     */    public String getSeparator() {        return separator;    }    public void setCrossToken(String newValue) {        crossToken = newValue;    }}